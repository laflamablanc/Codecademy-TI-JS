Graphs are the perfect data structure for medeling networks. 

-- Intro -- 
They are composed of nodes (vertices) which hold data, and edges which are a connection between 2 vertices.
examples of graphs:
- Maps with connection points between locations
- Socail networks with friendships connecting people
- Wireless networks with connections between computers and routers

-- To Connect or Not to Connect -- 
The highers the ratio of edges to vertices, the more connection in the graph

If two vertices do not have an edge between them, the graph is disconnected

Edges default behavior is bi-directional, meaning if you can travel from NodeA to NodeB, you can also
travel from NodeB to NodeA. 

-- Weights --

The shortest path between two vertices is not always the least expensive path.
Edges can have weights associated with them, that make traveling the edge very expensive.
Sometimes its better to travel along a less expensive edge and make multiple visits before ending at your
destination node, than to travel directly to it, if the edge has a very expensive weight associated with it.

-- Directed Graphs -- 

Sometimes graphs have an associated direction with its edges, meaning its only possible to travel one specific
way along it.

For example, it may be possible to travel from NodeA to NodeB but not vice versa in some graphs. 
If you can travel from NodeA -> NodeB, from NodeB -> NodeC and NodeC -> NodeA, that is called a CYCLE.

-- Representing Graphs -- 

2 ways:
1) Adjacency List
2) Adjacency Matrix

1. Adjacency Matrix

A table. 
Across the top every vertex in the graph appears as a column.
Down the side, every vertext appears again as a row.

Every node is listed twice since edges can be bidirectional.

   A  B  X  P  T 
A  0  1  0  0  0
B  1  0  1  1  1
X  0  1  0  1  0 
P  0  1  1  0  0
T  0  1  0  0  0

0 means no connection, while 1 means connection exists

Here, A is connected to B 
B is connected to A, X, P and T 
P is connected to X and B 

In a weighted graph, the table values would contain the weight values.

2. Adjecency List
Its a hash/object

In an adjacency list, each vertex contains a list of the vertices where an edge exists. 
To find an edge, one looks through the list for the desired vertex.

The same graph as above as a list:

{ 
    A: [B],
    B: [A, X, P, T],
    X: [B, P],
    P: [B, X],
    T: [B]
}





